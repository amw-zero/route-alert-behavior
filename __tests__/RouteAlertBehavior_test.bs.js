// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var RouteAlertBehavior = require("../src/RouteAlertBehavior.bs.js");

function testInterpreter(param, param$1) {
  return RouteAlertBehavior.behaviorInterpreter((function (api, respond) {
                return Curry._1(respond, {
                            duration: 90
                          });
              }), param, param$1);
}

function reduceActions(actions) {
  var state = {
    contents: RouteAlertBehavior.initialState
  };
  return Belt_List.reduce(actions, RouteAlertBehavior.initialState, (function (param, action) {
                RouteAlertBehavior.Reffect.makeDispatch(state.contents, RouteAlertBehavior.reducer, testInterpreter, (function (s) {
                          state.contents = s;
                          return /* () */0;
                        }))(action);
                return state.contents;
              }));
}

function canFetch(state) {
  if (state) {
    return false;
  } else {
    return true;
  }
}

Jest.describe("Route Alert Behavior", (function (param) {
        Jest.test("preventing alert creation when all data is not present", (function (param) {
                var finalState = reduceActions(/* :: */[
                      /* SetOrigin */Block.__(0, ["origin"]),
                      /* :: */[
                        /* SetDestination */Block.__(1, ["dest"]),
                        /* [] */0
                      ]
                    ]);
                return Jest.Expect.toBe(false, Jest.Expect.expect(finalState.routeFetchAbility ? false : true));
              }));
        Jest.test("preventing alert creation when all data is present", (function (param) {
                var finalState = reduceActions(/* :: */[
                      /* SetOrigin */Block.__(0, ["origin"]),
                      /* :: */[
                        /* SetDestination */Block.__(1, ["dest"]),
                        /* :: */[
                          /* SetMinutes */Block.__(2, [5]),
                          /* [] */0
                        ]
                      ]
                    ]);
                return Jest.Expect.toBe(true, Jest.Expect.expect(finalState.routeFetchAbility ? false : true));
              }));
        return Jest.test("calculating route duration", (function (param) {
                      var finalState = reduceActions(/* :: */[
                            /* SetOrigin */Block.__(0, ["origin"]),
                            /* :: */[
                              /* SetDestination */Block.__(1, ["dest"]),
                              /* :: */[
                                /* SetMinutes */Block.__(2, [5]),
                                /* :: */[
                                  /* FetchRoute */0,
                                  /* [] */0
                                ]
                              ]
                            ]
                          ]);
                      var match = finalState.routeDuration;
                      var passed = match !== undefined ? match === 90 : false;
                      return Jest.Expect.toBe(true, Jest.Expect.expect(passed));
                    }));
      }));

exports.testInterpreter = testInterpreter;
exports.reduceActions = reduceActions;
exports.canFetch = canFetch;
/*  Not a pure module */
