// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");

function makeDispatch(state, reducer, interpreter, onNextState) {
  var dispatch = function (action) {
    var match = Curry._2(reducer, state, action);
    Curry._1(onNextState, match[0]);
    return Belt_Option.forEach(match[1], (function (e) {
                  return Curry._2(interpreter, e, dispatch);
                }));
  };
  return dispatch;
}

var Reffect = {
  makeDispatch: makeDispatch
};

function directionsApi(origin, destination) {
  return "https://maps.googleapis.com/maps/api/directions/json?origin=" + (origin + ("&destination=" + (destination + "&key=AIzaSyC6AfIwElNGcfmzz-XyBHUb3ftWb2SL2vU")));
}

function errorResponseDecoder(json) {
  return {
          message: Json_decode.field("message", Json_decode.string, json)
        };
}

function errorResponseEncoder(errorResponse) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "message",
                errorResponse.message
              ],
              /* [] */0
            ]);
}

function routeAlertDecoder(json) {
  return {
          origin: Json_decode.field("origin", Json_decode.string, json),
          destination: Json_decode.field("destination", Json_decode.string, json),
          durationMinutes: Json_decode.field("durationMinutes", Json_decode.$$int, json)
        };
}

function routeAlertEncoder(routeAlert) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "origin",
                routeAlert.origin
              ],
              /* :: */[
                /* tuple */[
                  "destination",
                  routeAlert.destination
                ],
                /* :: */[
                  /* tuple */[
                    "durationMinutes",
                    routeAlert.durationMinutes
                  ],
                  /* [] */0
                ]
              ]
            ]);
}

function createRouteAlertEffectHandler(routeAlertJson) {
  return routeAlertEncoder(routeAlertDecoder(routeAlertJson));
}

function setOrigin(param_0) {
  return /* SetOrigin */Block.__(0, [param_0]);
}

function setDestination(param_0) {
  return /* SetDestination */Block.__(1, [param_0]);
}

function setMinutes(param_0) {
  return /* SetMinutes */Block.__(2, [param_0]);
}

function fetchedRoute(param_0) {
  return /* FetchedRoute */Block.__(3, [param_0]);
}

function behaviorInterpreter(networkBridge, effect, dispatch) {
  var actionCtor = effect[3];
  var request_body = Caml_option.some(routeAlertEncoder({
            origin: effect[0],
            destination: effect[1],
            durationMinutes: effect[2]
          }));
  var request = {
    method_: /* Post */1,
    path: "/route_alerts",
    body: request_body
  };
  return Curry._2(networkBridge, request, (function (response) {
                return Curry._1(dispatch, Curry._1(actionCtor, routeAlertDecoder(response).durationMinutes));
              }));
}

function applyFetchAbility(stateEffect) {
  var state = stateEffect[0];
  var match = state.origin;
  var match$1 = state.destination;
  var match$2 = state.minutes;
  var routeFetchAbility = match !== undefined && match$1 !== undefined && match$2 !== undefined ? /* CanFetch */0 : /* CannotFetch */1;
  return /* tuple */[
          {
            origin: state.origin,
            destination: state.destination,
            minutes: state.minutes,
            routeFetchAbility: routeFetchAbility,
            dataLoadingState: state.dataLoadingState,
            routeDuration: state.routeDuration
          },
          stateEffect[1]
        ];
}

function reducer(state, action) {
  var tmp;
  if (typeof action === "number") {
    tmp = action === /* FetchRoute */0 ? /* tuple */[
        {
          origin: state.origin,
          destination: state.destination,
          minutes: state.minutes,
          routeFetchAbility: state.routeFetchAbility,
          dataLoadingState: /* Loading */0,
          routeDuration: state.routeDuration
        },
        /* CreateRouteAlert */[
          Belt_Option.getExn(state.origin),
          Belt_Option.getExn(state.destination),
          Belt_Option.getExn(state.minutes),
          fetchedRoute
        ]
      ] : /* tuple */[
        state,
        undefined
      ];
  } else {
    switch (action.tag | 0) {
      case /* SetOrigin */0 :
          tmp = /* tuple */[
            {
              origin: action[0],
              destination: state.destination,
              minutes: state.minutes,
              routeFetchAbility: state.routeFetchAbility,
              dataLoadingState: state.dataLoadingState,
              routeDuration: state.routeDuration
            },
            undefined
          ];
          break;
      case /* SetDestination */1 :
          tmp = /* tuple */[
            {
              origin: state.origin,
              destination: action[0],
              minutes: state.minutes,
              routeFetchAbility: state.routeFetchAbility,
              dataLoadingState: state.dataLoadingState,
              routeDuration: state.routeDuration
            },
            undefined
          ];
          break;
      case /* SetMinutes */2 :
          tmp = /* tuple */[
            {
              origin: state.origin,
              destination: state.destination,
              minutes: action[0],
              routeFetchAbility: state.routeFetchAbility,
              dataLoadingState: state.dataLoadingState,
              routeDuration: state.routeDuration
            },
            undefined
          ];
          break;
      case /* FetchedRoute */3 :
          tmp = /* tuple */[
            {
              origin: state.origin,
              destination: state.destination,
              minutes: state.minutes,
              routeFetchAbility: state.routeFetchAbility,
              dataLoadingState: state.dataLoadingState,
              routeDuration: action[0]
            },
            undefined
          ];
          break;
      
    }
  }
  return applyFetchAbility(tmp);
}

function canFetch(state) {
  var match = state.routeFetchAbility;
  if (match) {
    return false;
  } else {
    return true;
  }
}

var fetchRoute = /* FetchRoute */0;

var noop = /* Noop */1;

var initialState = {
  origin: undefined,
  destination: undefined,
  minutes: undefined,
  routeFetchAbility: /* CannotFetch */1,
  dataLoadingState: /* NotLoading */1,
  routeDuration: undefined
};

exports.Reffect = Reffect;
exports.directionsApi = directionsApi;
exports.errorResponseDecoder = errorResponseDecoder;
exports.errorResponseEncoder = errorResponseEncoder;
exports.routeAlertDecoder = routeAlertDecoder;
exports.routeAlertEncoder = routeAlertEncoder;
exports.createRouteAlertEffectHandler = createRouteAlertEffectHandler;
exports.setOrigin = setOrigin;
exports.setDestination = setDestination;
exports.setMinutes = setMinutes;
exports.fetchRoute = fetchRoute;
exports.fetchedRoute = fetchedRoute;
exports.noop = noop;
exports.behaviorInterpreter = behaviorInterpreter;
exports.applyFetchAbility = applyFetchAbility;
exports.reducer = reducer;
exports.initialState = initialState;
exports.canFetch = canFetch;
/* No side effect */
