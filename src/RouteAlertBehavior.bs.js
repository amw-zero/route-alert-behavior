// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Id = require("bs-platform/lib/js/belt_Id.js");
var Belt_Map = require("bs-platform/lib/js/belt_Map.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Relude_IO = require("relude/src/Relude_IO.bs.js");
var Relude_RIO = require("relude/src/Relude_RIO.bs.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");
var Relude_List = require("relude/src/Relude_List.bs.js");
var Relude_Option = require("relude/src/Relude_Option.bs.js");

var partial_arg = { };

var partial_arg$1 = Relude_RIO.WithErrorAndEnv;

var RIO = (function (param) {
      return partial_arg$1(partial_arg, param);
    })({ });

var $less$$great = RIO.Infix.$less$$great;

var $less$hash$great = RIO.Infix.$less$hash$great;

var $great$great$eq = RIO.Infix.$great$great$eq;

function makeDispatch(state, reducer, environment, onNextState) {
  var dispatch = function (action) {
    var match = Curry._2(reducer, state, action);
    Curry._1(onNextState, match[0]);
    return Belt_Option.forEach(match[1], (function (e) {
                  return Relude_IO.unsafeRunAsync((function (param) {
                                if (param.tag) {
                                  return /* () */0;
                                } else {
                                  return dispatch(param[0]);
                                }
                              }), Curry._2(RIO.runRIO, environment, e));
                }));
  };
  return dispatch;
}

var Reffect = {
  makeDispatch: makeDispatch
};

function directionsApi(origin, destination) {
  return "https://maps.googleapis.com/maps/api/directions/json?origin=" + (origin + ("&destination=" + (destination + "&key=AIzaSyC6AfIwElNGcfmzz-XyBHUb3ftWb2SL2vU&departure_time=now")));
}

function durationFromDirections(gd) {
  return Relude_Option.bind(Relude_List.head(gd.routes), (function (r) {
                return Relude_Option.map((function (l) {
                              return l.duration.value;
                            }), Relude_List.head(r.legs));
              }));
}

function errorResponseDecoder(json) {
  return {
          message: Json_decode.field("message", Json_decode.string, json)
        };
}

function errorResponseEncoder(errorResponse) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "message",
                errorResponse.message
              ],
              /* [] */0
            ]);
}

function routeAlertDecoder(json) {
  return {
          origin: Json_decode.field("origin", Json_decode.string, json),
          destination: Json_decode.field("destination", Json_decode.string, json),
          durationMinutes: Json_decode.field("durationMinutes", Json_decode.$$int, json)
        };
}

function routeAlertEncoder(routeAlert) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "origin",
                routeAlert.origin
              ],
              /* :: */[
                /* tuple */[
                  "destination",
                  routeAlert.destination
                ],
                /* :: */[
                  /* tuple */[
                    "durationMinutes",
                    routeAlert.durationMinutes
                  ],
                  /* [] */0
                ]
              ]
            ]);
}

function googleDurationDecoder(json) {
  return {
          value: Json_decode.field("value", Json_decode.$$int, json)
        };
}

function googleLegDecoder(json) {
  return {
          duration: Json_decode.field("duration_in_traffic", googleDurationDecoder, json)
        };
}

function googleRouteDecoder(json) {
  return {
          legs: Json_decode.field("legs", (function (param) {
                  return Json_decode.list(googleLegDecoder, param);
                }), json)
        };
}

function googleDirectionsDecoder(json) {
  return {
          routes: Json_decode.field("routes", (function (param) {
                  return Json_decode.list(googleRouteDecoder, param);
                }), json)
        };
}

function createRouteAlertEffectHandler(routeAlertJson, networkBridge, onComplete) {
  var routeAlert = routeAlertDecoder(routeAlertJson);
  var api = directionsApi(routeAlert.origin, routeAlert.destination);
  var request = {
    method_: /* Get */0,
    path: api,
    body: undefined
  };
  return Curry._2(networkBridge, request, onComplete);
}

function setOrigin(param_0) {
  return /* SetOrigin */Block.__(0, [param_0]);
}

function setDestination(param_0) {
  return /* SetDestination */Block.__(1, [param_0]);
}

function setMinutes(param_0) {
  return /* SetMinutes */Block.__(2, [param_0]);
}

function fetchedRoute(param_0) {
  return /* FetchedRoute */Block.__(3, [param_0]);
}

function string_of_action(a) {
  if (typeof a === "number") {
    return "FetchRoute";
  } else {
    switch (a.tag | 0) {
      case /* SetOrigin */0 :
          return "SetOrigin(" + (a[0] + ")");
      case /* SetDestination */1 :
          return "SetDetination(" + (a[0] + ")");
      case /* SetMinutes */2 :
          return "SetMinutes(" + (String(a[0]) + ")");
      case /* FetchedRoute */3 :
          return "FetchedRoute(" + (Relude_Option.fold("default", (function (prim) {
                          return String(prim);
                        }), durationFromDirections(a[0])) + ")");
      
    }
  }
}

function applyFetchAbility(stateEffect) {
  var state = stateEffect[0];
  var match = state.origin;
  var match$1 = state.destination;
  var match$2 = state.minutes;
  var routeFetchAbility = match !== undefined && match$1 !== undefined && match$2 !== undefined ? /* CanFetch */0 : /* CannotFetch */1;
  return /* tuple */[
          {
            origin: state.origin,
            destination: state.destination,
            minutes: state.minutes,
            routeFetchAbility: routeFetchAbility,
            dataLoadingState: state.dataLoadingState,
            routeDuration: state.routeDuration
          },
          stateEffect[1]
        ];
}

function endpointFor(endpointType) {
  return {
          path: "/route_alerts",
          method_: /* Post */1,
          effectHandler: createRouteAlertEffectHandler
        };
}

var cmp = Caml_obj.caml_compare;

var EndpointComparable = Belt_Id.MakeComparable({
      cmp: cmp
    });

var endpointRegistry = Belt_List.reduce(/* :: */[
      /* RouteAlertCreate */0,
      /* [] */0
    ], Belt_Map.make(EndpointComparable), (function (registry, endpointType) {
        return Belt_Map.set(registry, /* RouteAlertCreate */0, {
                    path: "/route_alerts",
                    method_: /* Post */1,
                    effectHandler: createRouteAlertEffectHandler
                  });
      }));

function routeAlertCreate(origin, destination, minutes, afterActionCtor) {
  var routeAlert = {
    origin: origin,
    destination: destination,
    durationMinutes: minutes
  };
  var serverRequest_body = Caml_option.some(routeAlertEncoder(routeAlert));
  var serverRequest = {
    method_: /* Post */1,
    path: "/route_alerts",
    body: serverRequest_body
  };
  return Curry._1(RIO.make, (function (env) {
                return Relude_IO.map((function (a) {
                              return Curry._1(afterActionCtor, googleDirectionsDecoder(a));
                            }), Relude_IO.async((function (onDone) {
                                  return Curry._2(env.networkBridge, serverRequest, (function (json) {
                                                return Curry._1(onDone, /* Ok */Block.__(0, [json]));
                                              }));
                                })));
              }));
}

function stressTest(param) {
  return Curry._1(RIO.make, (function (env) {
                return Relude_IO.pure(/* SetOrigin */Block.__(0, ["stress testing"]));
              }));
}

var Api = {
  routeAlertCreate: routeAlertCreate,
  stressTest: stressTest
};

function reducer(state, action) {
  var tmp;
  if (typeof action === "number") {
    tmp = /* tuple */[
      {
        origin: state.origin,
        destination: state.destination,
        minutes: state.minutes,
        routeFetchAbility: state.routeFetchAbility,
        dataLoadingState: /* Loading */0,
        routeDuration: state.routeDuration
      },
      routeAlertCreate(Belt_Option.getExn(state.origin), Belt_Option.getExn(state.destination), Belt_Option.getExn(state.minutes), fetchedRoute)
    ];
  } else {
    switch (action.tag | 0) {
      case /* SetOrigin */0 :
          tmp = /* tuple */[
            {
              origin: action[0],
              destination: state.destination,
              minutes: state.minutes,
              routeFetchAbility: state.routeFetchAbility,
              dataLoadingState: state.dataLoadingState,
              routeDuration: state.routeDuration
            },
            undefined
          ];
          break;
      case /* SetDestination */1 :
          tmp = /* tuple */[
            {
              origin: state.origin,
              destination: action[0],
              minutes: state.minutes,
              routeFetchAbility: state.routeFetchAbility,
              dataLoadingState: state.dataLoadingState,
              routeDuration: state.routeDuration
            },
            undefined
          ];
          break;
      case /* SetMinutes */2 :
          tmp = /* tuple */[
            {
              origin: state.origin,
              destination: state.destination,
              minutes: action[0],
              routeFetchAbility: state.routeFetchAbility,
              dataLoadingState: state.dataLoadingState,
              routeDuration: state.routeDuration
            },
            undefined
          ];
          break;
      case /* FetchedRoute */3 :
          tmp = /* tuple */[
            {
              origin: state.origin,
              destination: state.destination,
              minutes: state.minutes,
              routeFetchAbility: state.routeFetchAbility,
              dataLoadingState: state.dataLoadingState,
              routeDuration: durationFromDirections(action[0])
            },
            undefined
          ];
          break;
      
    }
  }
  return applyFetchAbility(tmp);
}

function canFetch(state) {
  var match = state.routeFetchAbility;
  if (match) {
    return false;
  } else {
    return true;
  }
}

var fetchRoute = /* FetchRoute */0;

var initialState = {
  origin: undefined,
  destination: undefined,
  minutes: undefined,
  routeFetchAbility: /* CannotFetch */1,
  dataLoadingState: /* NotLoading */1,
  routeDuration: undefined
};

exports.RIO = RIO;
exports.$less$$great = $less$$great;
exports.$less$hash$great = $less$hash$great;
exports.$great$great$eq = $great$great$eq;
exports.Reffect = Reffect;
exports.directionsApi = directionsApi;
exports.durationFromDirections = durationFromDirections;
exports.errorResponseDecoder = errorResponseDecoder;
exports.errorResponseEncoder = errorResponseEncoder;
exports.routeAlertDecoder = routeAlertDecoder;
exports.routeAlertEncoder = routeAlertEncoder;
exports.googleDurationDecoder = googleDurationDecoder;
exports.googleLegDecoder = googleLegDecoder;
exports.googleRouteDecoder = googleRouteDecoder;
exports.googleDirectionsDecoder = googleDirectionsDecoder;
exports.createRouteAlertEffectHandler = createRouteAlertEffectHandler;
exports.setOrigin = setOrigin;
exports.setDestination = setDestination;
exports.setMinutes = setMinutes;
exports.fetchRoute = fetchRoute;
exports.fetchedRoute = fetchedRoute;
exports.string_of_action = string_of_action;
exports.applyFetchAbility = applyFetchAbility;
exports.endpointFor = endpointFor;
exports.EndpointComparable = EndpointComparable;
exports.endpointRegistry = endpointRegistry;
exports.Api = Api;
exports.reducer = reducer;
exports.initialState = initialState;
exports.canFetch = canFetch;
/* RIO Not a pure module */
